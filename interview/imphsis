Round 1:
1. What is volatile
2. Sorting Machanisum
3. How time complexisty of Merge Sort is nlogn
4. Deque, usage of Deuqe
5. Stready design Pattern
6. Contructor Chaing.
7. What is complitatin Time and run time error.
8. Difference between Volatile and synchronization
9. Difference between Deque and Doubling ended deque.
10. Difference between Functinal interface and lambda function
11. Java is pass by value or refernace

Round 2:
1. Smallest subarray with sum greater than a given value.\



2. Given Inorder traversal and Level Order traversal of a Binary Tree. The task is to calculate the height of the tree without constructing it.

Example:

Input : Input: Two arrays that represent Inorder
       and level order traversals of a 
       Binary Tree
       in[]    = {4, 8, 10, 12, 14, 20, 22};
       level[] = {20, 8, 22, 4, 12, 10, 14};
Output : 4
https://www.geeksforgeeks.org/calculate-height-of-binary-tree-using-inorder-and-level-order-traversal/



Solutions

Round 2, Question 2:

// Java program to caulate height of Binary Tree 
// from InOrder and LevelOrder Traversals 
import java.util.*; 
class GFG 
{ 
static int height; 

/* Function to find index of value 
in the InOrder Traversal array */
static int search(int arr[], int strt, 
				int end, int value) 
{ 
	for (int i = strt; i <= end; i++) 
		if (arr[i] == value) 
			return i; 
	return -1; 
} 

// Function to calculate the height 
// of the Binary Tree 
static int getHeight(int in[], int level[], 
					int start, int end, int n) 
{ 

	// Base Case 
	if (start > end) 
		return 0; 

	// Get index of current root in InOrder Traversal 
	int getIndex = search(in, start, end, level[0]); 

	if (getIndex == -1) 
		return 0; 

	// Count elements in Left Subtree 
	int leftCount = getIndex - start; 

	// Count elements in right Subtree 
	int rightCount = end - getIndex; 

	// Declare two arrays for left and 
	// right subtrees 
	int []newLeftLevel = new int[leftCount]; 
	int []newRightLevel = new int[rightCount]; 

	int lheight = 0, rheight = 0; 
	int k = 0; 

	// Extract values from level order traversal array 
	// for current left subtree 
	for (int i = 0; i < n; i++) 
	{ 
		for (int j = start; j < getIndex; j++) 
		{ 
			if (level[i] == in[j]) 
			{ 
				newLeftLevel[k] = level[i]; 
				k++; 
				break; 
			} 
		} 
	} 

	k = 0; 

	// Extract values from level order traversal array 
	// for current right subtree 
	for (int i = 0; i < n; i++) 
	{ 
		for (int j = getIndex + 1; j <= end; j++) 
		{ 
			if (level[i] == in[j]) 
			{ 
				newRightLevel[k] = level[i]; 
				k++; 
				break; 
			} 
		} 
	} 

	// Recursively call to calculate 
	// height of left Subtree 
	if (leftCount > 0) 
		lheight = getHeight(in, newLeftLevel, start, 
				getIndex - 1, leftCount); 

	// Recursively call to calculate 
	// height of right Subtree 
	if (rightCount > 0) 
		rheight = getHeight(in, newRightLevel, 
				getIndex + 1, end, rightCount); 

	// Current height 
	height = Math.max(lheight + 1, rheight + 1); 

	// Delete Auxiliary arrays 
	newRightLevel=null; 
	newLeftLevel=null; 

	// return height 
	return height; 
} 

// Driver program to test above functions 
public static void main(String[] args) 
{ 
	int in[] = {4, 8, 10, 12, 14, 20, 22}; 
	int level[] = {20, 8, 22, 4, 12, 10, 14}; 
	int n = in.length; 

	height = 0; 

	System.out.println(getHeight(in, level, 0, n - 1, n)); 
} 
} 

// This code is contributed by Rajput-Ji 
